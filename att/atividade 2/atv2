class Produto:
    def _init_(self, codigo, nome, quantidade, preco):
        self.codigo = codigo
        self.nome = nome
        self.quantidade = quantidade
        self.preco = preco

    def _str_(self):
        return f"[{self.codigo}] {self.nome} - {self.quantidade} unidades - R${self.preco:.2f}"


RED = True
BLACK = False

class Node:
    def _init_(self, produto, color=RED):
        self.produto = produto
        self.codigo = produto.codigo
        self.left = None
        self.right = None
        self.color = color

class RedBlackTree:
    def _init_(self):
        self.root = None

    def is_red(self, node):
        return node is not None and node.color == RED

    def rotate_left(self, h):
        x = h.right
        h.right = x.left
        x.left = h
        x.color = h.color
        h.color = RED
        return x

    def rotate_right(self, h):
        x = h.left
        h.left = x.right
        x.right = h
        x.color = h.color
        h.color = RED
        return x

    def flip_colors(self, h):
        h.color = RED
        h.left.color = BLACK
        h.right.color = BLACK

    def insert(self, produto):
        self.root = self._insert(self.root, produto)
        self.root.color = BLACK

    def _insert(self, h, produto):
        if h is None:
            return Node(produto)

        if produto.codigo < h.codigo:
            h.left = self._insert(h.left, produto)
        elif produto.codigo > h.codigo:
            h.right = self._insert(h.right, produto)
        else:
            h.produto = produto  # Atualiza se já existir

        if self.is_red(h.right) and not self.is_red(h.left):
            h = self.rotate_left(h)
        if self.is_red(h.left) and self.is_red(h.left.left):
            h = self.rotate_right(h)
        if self.is_red(h.left) and self.is_red(h.right):
            self.flip_colors(h)

        return h

    def search(self, codigo):
        return self._search(self.root, codigo)

    def _search(self, node, codigo):
        if node is None:
            return None
        if codigo < node.codigo:
            return self._search(node.left, codigo)
        elif codigo > node.codigo:
            return self._search(node.right, codigo)
        else:
            return node.produto

    def in_order(self):
        self._in_order(self.root)

    def _in_order(self, node):
        if node is not None:
            self._in_order(node.left)
            cor = "Vermelho" if node.color == RED else "Preto"
            p = node.produto
            print(f"{p.codigo}: {p.nome}, Qtd: {p.quantidade}, Preço: R${p.preco:.2f}, Cor: {cor}")
            self._in_order(node.right)


    def remove(self, codigo):
        self.root, _ = self._remove(self.root, codigo)
        if self.root is not None:
            self.root.color = BLACK

    def _remove(self, node, codigo):
        if node is None:
            return node, None

        if codigo < node.codigo:
            node.left, produto_removido = self._remove(node.left, codigo)
        elif codigo > node.codigo:
            node.right, produto_removido = self._remove(node.right, codigo)
        else:
         
            if node.left is None:
                return node.right, node.produto
            elif node.right is None:
                return node.left, node.produto

          
            min_node = self._min(node.right)
            node.produto = min_node.produto
            node.codigo = min_node.codigo
            node.right, _ = self._remove(node.right, min_node.codigo)

      
        if self.is_red(node.right) and not self.is_red(node.left):
            node = self.rotate_left(node)
        if self.is_red(node.left) and self.is_red(node.left.left):
            node = self.rotate_right(node)
        if self.is_red(node.left) and self.is_red(node.right):
            self.flip_colors(node)

        return node, produto_removido

    def _min(self, node):
        while node.left is not None:
            node = node.left
        return node


class Inventario:
    def _init_(self):
        self.arvore = RedBlackTree()

    def cadastrar_produto(self, codigo, nome, quantidade, preco):
        produto = Produto(codigo, nome, quantidade, preco)
        self.arvore.insert(produto)
        print(f"produto '{nome}' cadastrado com sucesso.")

    def buscar_produto(self, codigo):
        produto = self.arvore.search(codigo)
        if produto:
            print(f"Produto encontrado: {produto}")
        else:
            print("Produto não encontrado.")

    def listar_produtos(self):
        print("\n Produtos cadastrados (em ordem):")
        self.arvore.in_order()

    def remover_produto(self, codigo):
        produto = self.arvore.search(codigo)
        if produto:
            self.arvore.remove(codigo)
            print(f"produto '{produto.nome}' removido com sucesso.")
        else:
            print("produto não encontrado para remoção.")


def menu():
    inventario = Inventario()

    while True:
        print("-----------------------")
        print("1. Cadastrar Produto")
        print("2. Buscar Produto")
        print("3. Listar Produtos")
        print("4. Remover Produto")
        print("5. Sair")
        print("-----------------------")

        opcao = input("Escolha uma opção: ")

        if opcao == '1':
            try:
                codigo = int(input("Código: "))
                nome = input("Nome: ")
                quantidade = int(input("Quantidade: "))
                preco = float(input("Preço: "))
                inventario.cadastrar_produto(codigo, nome, quantidade, preco)
            except ValueError:
                print("Dados inválidos.")
        elif opcao == '2':
            try:
                codigo = int(input("Digite o código do produto: "))
                inventario.buscar_produto(codigo)
            except ValueError:
                print("Código inválido.")
        elif opcao == '3':
            inventario.listar_produtos()
        elif opcao == '4':
            try:
                codigo = int(input("Digite o código do produto para remover: "))
                inventario.remover_produto(codigo)
            except ValueError:
                print("Código inválido.")
        elif opcao == '5':
            print("Encerrando o sistema.")
            break
        else:
            print("opção inválida.")

if __name__ == "__main__":
    menu()